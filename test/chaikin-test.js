import assert from 'assert'
import * as geom from 'ol/geom'
import { smooth } from '../chaikin'

describe('chaikin', function () {
  it('should smooth supported (simple) geometries', function () {

    const geometries = [
      { n: 0, geometry: new geom.Polygon([[[0,100],[100,100],[100,0],[0,0],[0,100]]]), expected: [[[0,100],[100,100],[100,0],[0,0],[0,100]]] },
      { n: 2, geometry: new geom.Polygon([[[0,100],[100,100],[100,0],[0,0],[0,100]]]), expected: [[[37.5,100],[62.5,100],[81.25,93.75],[93.75,81.25],[100,62.5],[100,37.5],[93.75,18.75],[81.25,6.25],[62.5,0],[37.5,0],[18.75,6.25],[6.25,18.75],[0,37.5],[0,62.5],[6.25,81.25],[18.75,93.75],[37.5,100]]] },
      { n: 2, geometry: new geom.Polygon([[[0,100],[100,100],[100,0],[0,0],[0,100]],[[10, 90],[90,90],[90,10],[10, 10],[10,90]]]), expected: [[[37.5,100],[62.5,100],[81.25,93.75],[93.75,81.25],[100,62.5],[100,37.5],[93.75,18.75],[81.25,6.25],[62.5,0],[37.5,0],[18.75,6.25],[6.25,18.75],[0,37.5],[0,62.5],[6.25,81.25],[18.75,93.75],[37.5,100]],[[40,90],[60,90],[75,85],[85,75],[90,60],[90,40],[85,25],[75,15],[60,10],[40,10],[25,15],[15,25],[10,40],[10,60],[15,75],[25,85],[40,90]]] },
      { n: 1, geometry: new geom.MultiPolygon([[[[0, 100], [100, 100], [100, 0], [0, 0], [0, 100]], [[10, 90], [90, 90], [90, 10], [10, 10], [10, 90]]]]), expected: [[[[25,100],[75,100],[100,75],[100,25],[75,0],[25,0],[0,25],[0,75],[25,100]],[[30,90],[70,90],[90,70],[90,30],[70,10],[30,10],[10,30],[10,70],[30,90]]]] },
      { n: 0, geometry: new geom.LineString([[0,100],[100,100],[100,0],[0,0]]), expected: [[0,100],[100,100],[100,0],[0,0]] },
      { n: 2, geometry: new geom.LineString([[0,100],[100,100],[100,0],[0,0]]), expected: [[0,100],[6.25,100],[18.75,100],[37.5,100],[62.5,100],[81.25,93.75],[93.75,81.25],[100,62.5],[100,37.5],[93.75,18.75],[81.25,6.25],[62.5,0],[37.5,0],[18.75,0],[6.25,0],[0,0]] },
      { n: 3, geometry: new geom.MultiLineString([[[0,100],[100,100],[100,0],[0,0]], [[20,80],[80,80],[80,20],[20,20]]]), expected: [[[0,100],[1.5625,100],[4.6875,100],[9.375,100],[15.625,100],[23.4375,100],[32.8125,100],[43.75,100],[56.25,100],[67.1875,98.4375],[76.5625,95.3125],[84.375,90.625],[90.625,84.375],[95.3125,76.5625],[98.4375,67.1875],[100,56.25],[100,43.75],[98.4375,32.8125],[95.3125,23.4375],[90.625,15.625],[84.375,9.375],[76.5625,4.6875],[67.1875,1.5625],[56.25,0],[43.75,0],[32.8125,0],[23.4375,0],[15.625,0],[9.375,0],[4.6875,0],[1.5625,0],[0,0]],[[20,80],[20.9375,80],[22.8125,80],[25.625,80],[29.375,80],[34.0625,80],[39.6875,80],[46.25,80],[53.75,80],[60.3125,79.0625],[65.9375,77.1875],[70.625,74.375],[74.375,70.625],[77.1875,65.9375],[79.0625,60.3125],[80,53.75],[80,46.25],[79.0625,39.6875],[77.1875,34.0625],[74.375,29.375],[70.625,25.625],[65.9375,22.8125],[60.3125,20.9375],[53.75,20],[46.25,20],[39.6875,20],[34.0625,20],[29.375,20],[25.625,20],[22.8125,20],[20.9375,20],[20,20]]] }
    ]

    geometries.forEach(({ n, geometry, expected}, index) => {
      const actual = smooth(n)(geometry).getCoordinates()
      assert.deepStrictEqual(actual, expected, `coordinate missmatch @ ${index}`)
    })
  })

  it('should smooth supported geometry collection', function () {
    const geometry = new geom.GeometryCollection([
      new geom.Polygon([[[0,100],[100,100],[100,0],[0,0],[0,100]]]),
      new geom.LineString([[0,100],[100,100],[100,0],[0,0]])
    ])

    const expected = [
      [[[37.5,100],[62.5,100],[81.25,93.75],[93.75,81.25],[100,62.5],[100,37.5],[93.75,18.75],[81.25,6.25],[62.5,0],[37.5,0],[18.75,6.25],[6.25,18.75],[0,37.5],[0,62.5],[6.25,81.25],[18.75,93.75],[37.5,100]]],
      [[0,100],[6.25,100],[18.75,100],[37.5,100],[62.5,100],[81.25,93.75],[93.75,81.25],[100,62.5],[100,37.5],[93.75,18.75],[81.25,6.25],[62.5,0],[37.5,0],[18.75,0],[6.25,0],[0,0]]
    ]

    smooth(2)(geometry).getGeometries()
      .map(geometry => geometry.getCoordinates())
      .forEach((actual, index) => assert.deepStrictEqual(actual, expected[index]))
  })

  it('should not change unsupported geometries', function () {
    [
      new geom.Point([0, 0]),
      new geom.Circle([0, 0], 10)
    ].forEach(geometry => assert(geometry === smooth(1)(geometry)))
  })
})
